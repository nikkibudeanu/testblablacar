{*

Injectable blueprint that represents full token as an object.

Source data: Token Metadata and Payload, all types (https://developers.supernova.io/design-system-data/tokens)
Note: Token is passed as `context` property because it is injected

{
  "context": {
    "id": string
    "name": string
    "description": string
    "tokenType": Depends on the token type
    "origin": ItemOrigin | null
    "value": Depends on the token type
  }
}


Rendered as:

  {
    name: string,
    type: string,
    description: string,
    value: string,
    key: value pairs according to the various tokens types
  };

*}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(context.id) /]}
{[ if (!includes(context, tokenGroup, 'specs')) ]}
  {
{[ let token = context /]}
    name: '{[ inject "rendered-ts-name-dictionnary" context token /]}',
    type: '{[ inject "rendered-type" context token /]}',
    theme: '{{isLightTheme(token, tokenGroup) ? 'light' : 'dark'}}',
    description: '{{ token.description }}',
    {[ inject "rendered-value-detailed" context token /]}
id: {{ addQuotes(getFigmaKey(token)) }},
  },
{[/]}